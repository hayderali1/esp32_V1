const express = require('express');
const http = require('http');
const bodyParser = require('body-parser');
const cors = require('cors');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);

// Enable CORS to allow requests from http://localhost:3000
app.use(cors({
  origin: 'http://localhost:3000',  // Allow requests from this origin
  methods: ['GET', 'POST'],
  credentials: true
}));

const io = socketIo(server, {
  cors: {
    origin: "http://localhost:3000",  // Allow client-side requests from this origin
    methods: ["GET", "POST"],
    credentials: true
  }
});

// Store BLE signal strength data and positions
let bleData = {};
const stationaryDevices = {
  // Define the stationary device coordinates (replace these coordinates as necessary)
  '3C:E9:0E:84:E7:F8': { x: 450, y: 295 } // Center for demo
};

// Middleware setup
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Endpoint to serve the index.html page
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

// Endpoint to update RSSI data from the stationary ESP32
app.post('/update-location', (req, res) => {
  const { device: deviceAddress, esp32_address: esp32Address, rssi } = req.body;
  
  if (!deviceAddress || !rssi) {
    return res.status(400).send('Missing device address or RSSI');
  }

  console.log(`Received data for device: ${deviceAddress}, RSSI: ${rssi}`);

  if (!bleData[deviceAddress]) {
    bleData[deviceAddress] = { rssi: [], position: null, lastUpdateTime: Date.now() };
  }

  // Store RSSI data
  bleData[deviceAddress].rssi.push(Number(rssi));
  bleData[deviceAddress].lastUpdateTime = Date.now();

  // Maintain only the last 10 RSSI values
  if (bleData[deviceAddress].rssi.length > 10) bleData[deviceAddress].rssi.shift();

  // Calculate average RSSI and estimated distance
  const avgRssi = bleData[deviceAddress].rssi.reduce((sum, val) => sum + val, 0) / bleData[deviceAddress].rssi.length;
  bleData[deviceAddress].distance = calculateDistance(avgRssi);

  // Update position based on distance
  updateDevicePosition(deviceAddress);

  console.log(`Updated distance for ${deviceAddress}: ${bleData[deviceAddress].distance} meters`);

  // Emit the updated position to clients
  io.emit('updateMobilePositions', bleData);

  res.sendStatus(200);
});

// Function to calculate distance based on RSSI
function calculateDistance(rssi) {
  const txPower = -35; // Adjusted transmit power at 1 meter
  const n = 2.0;       // Path loss exponent (environmental factor)
  return Math.pow(10, (txPower - rssi) / (10 * n));
}

// Function to update the position of the mobile device based on calculated distance
function updateDevicePosition(deviceAddress) {
  const deviceData = bleData[deviceAddress];
  if (deviceData && deviceData.distance !== undefined) {
    const distance = deviceData.distance;

    // Use stationary device coordinates as origin
    const origin = stationaryDevices['3C:E9:0E:84:E7:F8'];

    // For simplicity, we assume movement along the x-axis
    const x = origin.x + distance * 10; // Scale distance to fit within canvas
    const y = origin.y;

    // Update position in bleData
    bleData[deviceAddress].position = { x, y };
  }
}

// Clean up inactive devices every second
setInterval(() => {
  const currentTime = Date.now();
  for (const deviceAddress in bleData) {
    if (currentTime - bleData[deviceAddress].lastUpdateTime > 5000) {
      delete bleData[deviceAddress];
    }
  }
  console.log("Emitting updateCanvas:", { stationaryDevices, bleData }); // Debug log
  io.emit('updateCanvas', { stationaryDevices, bleData });
}, 1000);

// Handle client connections
io.on('connection', (socket) => {
  console.log('A client connected');
  socket.emit('updateCanvas', { stationaryDevices, bleData });

  socket.on('disconnect', () => {
    console.log('A client disconnected');
  });
});

// Start the server
const PORT = 3000;
server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
